name: Node CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  node-ci:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        directory: [./.github/scripts/fetch-tomachi-emojis, ./.github/scripts/generate-readme]
      fail-fast: false

    steps:
      - name: 🛎 Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 🏗 Setup node
        uses: actions/setup-node@v5
        with:
          node-version-file: ${{ matrix.directory }}/.node-version

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
          package_json_file: ${{ matrix.directory }}/package.json

      - name: 📃 Check package.json definition
        id: package-json
        working-directory: ${{ matrix.directory }}
        run: |
          compile=$(jq '.scripts | has("compile")' package.json)
          build=$(jq '.scripts | has("build")' package.json)
          generate=$(jq '.scripts | has("generate")' package.json)
          package=$(jq '.scripts | has("package")' package.json)
          lint=$(jq '.scripts | has("lint")' package.json)
          test=$(jq '.scripts | has("test")' package.json)

          echo "compile: $compile"
          echo "build: $build"
          echo "generate: $generate"
          echo "package: $package"
          echo "lint: $lint"
          echo "test: $test"

          echo "compile=$compile" >> $GITHUB_OUTPUT
          echo "build=$build" >> $GITHUB_OUTPUT
          echo "generate=$generate" >> $GITHUB_OUTPUT
          echo "package=$package" >> $GITHUB_OUTPUT
          echo "lint=$lint" >> $GITHUB_OUTPUT
          echo "test=$test" >> $GITHUB_OUTPUT

      - name: 📂 Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: 📂 Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 👨🏻‍💻 Install dependencies
        working-directory: ${{ matrix.directory }}
        run: |
          pnpm install --frozen-lockfile --prefer-frozen-lockfile

      - name: 👀 Run linter
        if: steps.package-json.outputs.lint == 'true'
        working-directory: ${{ matrix.directory }}
        run: pnpm run lint

      - name: 🎁 Run package
        if: steps.package-json.outputs.package == 'true'
        working-directory: ${{ matrix.directory }}
        run: pnpm run package

      - name: 🧪 Run tests
        if: steps.package-json.outputs.test == 'true'
        working-directory: ${{ matrix.directory }}
        run: pnpm run test

      - name: ☑️ Check Dependencies
        working-directory: ${{ matrix.directory }}
        run: npx depcheck

  finished-node-ci:
    name: Check finished Node CI
    runs-on: ubuntu-latest
    needs:
      - node-ci

    steps:
      - name: Check finished Node CI
        run: echo ok